#!/usr/bin/env python3
"""
Script para an√°lise completa de qualidade de c√≥digo.
Executa m√∫ltiplas ferramentas de an√°lise e formata√ß√£o.
"""

import subprocess
import sys
from pathlib import Path

def run_command(cmd, description):
    """Executa um comando e exibe o resultado."""
    print(f"\n{'='*60}")
    print(f"üîç {description}")
    print(f"{'='*60}")

    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=False)
        if result.stdout:
            print(result.stdout)
        if result.stderr and result.returncode != 0:
            print(f"‚ùå Erros:\n{result.stderr}")
        return result.returncode == 0
    except (subprocess.SubprocessError, OSError) as e:
        print(f"‚ùå Erro ao executar: {e}")
        return False

def main():
    """Executa an√°lise completa do c√≥digo."""
    src_path = "src"

    if not Path(src_path).exists():
        print(f"‚ùå Diret√≥rio {src_path} n√£o encontrado!")
        sys.exit(1)

    print("üöÄ Iniciando an√°lise completa de qualidade de c√≥digo...")

    # 1. Formata√ß√£o autom√°tica (se dispon√≠vel)
    print("\nüé® FORMATA√á√ÉO AUTOM√ÅTICA")
    run_command("python -m isort src/ --profile black --check-only",
                "Verifica√ß√£o de imports com isort")

    # 2. An√°lise de qualidade core
    print("\nüîç AN√ÅLISE DE QUALIDADE")
    run_command("python -m pylint src --disable=C0114,C0115,C0116 --reports=n --score=y",
                "An√°lise completa com Pylint")
    run_command("python -m flake8 src/", "An√°lise de estilo com Flake8")
    run_command("python -m vulture src/", "Detec√ß√£o de c√≥digo morto com Vulture")

    # 3. An√°lise avan√ßada (se dispon√≠vel)
    print("\n‚ö° AN√ÅLISE AVAN√áADA")
    run_command("python -m mypy src/ --ignore-missing-imports", "Verifica√ß√£o de tipos")
    run_command("python -m bandit -r src/ --format screen", "An√°lise de seguran√ßa")
    run_command("python -m radon cc src/ -a", "Complexidade ciclom√°tica")
    run_command("python -m autoflake --check --remove-all-unused-imports --recursive src/",
                "Verifica√ß√£o de imports n√£o utilizados")

    print(f"\n{'='*60}")
    print("‚úÖ An√°lise completa finalizada!")
    print("üìä Revise os resultados acima para identificar melhorias.")
    print("üí° Para instalar ferramentas faltantes: pip install -r requirements-dev.txt")
    print(f"{'='*60}")

if __name__ == "__main__":
    main()
