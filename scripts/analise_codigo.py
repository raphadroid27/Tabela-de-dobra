#!/usr/bin/env python3
"""
Script para an√°lise completa de qualidade de c√≥digo.
Executa m√∫ltiplas ferramentas de an√°lise e formata√ß√£o.
"""

import subprocess
import sys
from pathlib import Path


def check_tool_installed(tool_name):
    """Verifica se uma ferramenta est√° instalada."""
    try:
        # Para algumas ferramentas, verificar se o m√≥dulo pode ser importado
        if tool_name == 'autoflake':
            subprocess.run([sys.executable, "-c", f"import {tool_name}"],
                           capture_output=True, check=True, timeout=10)
        else:
            subprocess.run([sys.executable, "-m", tool_name, "--version"],
                           capture_output=True, check=True, timeout=10)
        return True
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError):
        return False


def run_command(cmd, description, timeout=120):
    """Executa um comando e exibe o resultado."""
    print(f"\n{'='*60}")
    print(f"üîç {description}")
    print(f"{'='*60}")

    try:
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            check=False,
            timeout=timeout
        )
        if result.stdout:
            print(result.stdout)
        if result.stderr and result.returncode != 0:
            print(f"‚ùå Erros:\n{result.stderr}")
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print(f"‚è∞ Comando excedeu o tempo limite de {timeout}s")
        return False
    except (subprocess.SubprocessError, OSError) as e:
        print(f"‚ùå Erro ao executar: {e}")
        return False
    except KeyboardInterrupt:
        print("üõë Comando interrompido pelo usu√°rio")
        return False


def main():
    """Executa an√°lise completa do c√≥digo."""
    src_path = "src"

    if not Path(src_path).exists():
        print(f"‚ùå Diret√≥rio {src_path} n√£o encontrado!")
        sys.exit(1)

    print("üöÄ Iniciando an√°lise completa de qualidade de c√≥digo...")

    # Verificar ferramentas dispon√≠veis
    tools = {
        'isort': check_tool_installed('isort'),
        'pylint': check_tool_installed('pylint'),
        'flake8': check_tool_installed('flake8'),
        'vulture': check_tool_installed('vulture'),
        'mypy': check_tool_installed('mypy'),
        'bandit': check_tool_installed('bandit'),
        'radon': check_tool_installed('radon'),
        'autoflake': check_tool_installed('autoflake')
    }

    missing_tools = [tool for tool, installed in tools.items() if not installed]
    if missing_tools:
        print(f"\n‚ö†Ô∏è  Ferramentas n√£o instaladas: {', '.join(missing_tools)}")
        print("üí° Para instalar: pip install -r requirements-dev.txt")

    try:
        # 1. Formata√ß√£o autom√°tica (se dispon√≠vel)
        print("\nüé® FORMATA√á√ÉO AUTOM√ÅTICA")
        if tools['isort']:
            run_command("python -m isort src/ --profile black --check-only",
                        "Verifica√ß√£o de imports com isort", 30)
        else:
            print("‚è≠Ô∏è  Pulando isort - n√£o instalado")

        # 2. An√°lise de qualidade core
        print("\nüîç AN√ÅLISE DE QUALIDADE")
        if tools['pylint']:
            run_command("python -m pylint src --disable=C0114,C0115,C0116,R0903,R0913 --reports=n --score=y --jobs=0",
                        "An√°lise completa com Pylint", 300)
        else:
            print("‚è≠Ô∏è  Pulando pylint - n√£o instalado")

        if tools['flake8']:
            run_command("python -m flake8 src/ --max-line-length=100 --ignore=E203,W503",
                        "An√°lise de estilo com Flake8", 60)
        else:
            print("‚è≠Ô∏è  Pulando flake8 - n√£o instalado")

        if tools['vulture']:
            run_command("python -m vulture src/ --min-confidence 80",
                        "Detec√ß√£o de c√≥digo morto com Vulture", 60)
        else:
            print("‚è≠Ô∏è  Pulando vulture - n√£o instalado")

        # 3. An√°lise avan√ßada (se dispon√≠vel)
        print("\n‚ö° AN√ÅLISE AVAN√áADA")
        if tools['mypy']:
            run_command("python -m mypy src/ --ignore-missing-imports --no-strict-optional",
                        "Verifica√ß√£o de tipos", 120)
        else:
            print("‚è≠Ô∏è  Pulando mypy - n√£o instalado")

        if tools['bandit']:
            run_command("python -m bandit -r src/ --format screen --skip B101",
                        "An√°lise de seguran√ßa", 90)
        else:
            print("‚è≠Ô∏è  Pulando bandit - n√£o instalado")

        if tools['radon']:
            run_command("python -m radon cc src/ -a --min=B",
                        "Complexidade ciclom√°tica", 60)
        else:
            print("‚è≠Ô∏è  Pulando radon - n√£o instalado")

        if tools['autoflake']:
            run_command("python -m autoflake --check --remove-all-unused-imports --recursive src/",
                        "Verifica√ß√£o de imports n√£o utilizados", 60)
        else:
            print("‚è≠Ô∏è  Pulando autoflake - n√£o instalado")

        print(f"\n{'='*60}")
        print("‚úÖ An√°lise completa finalizada!")
        print("üìä Revise os resultados acima para identificar melhorias.")
        if missing_tools:
            print(
                f"üí° Para instalar ferramentas faltantes: pip install {' '.join(missing_tools)}")
        print(f"{'='*60}")

    except KeyboardInterrupt:
        print("\nüõë An√°lise interrompida pelo usu√°rio")
        sys.exit(1)
    except (subprocess.SubprocessError, OSError, RuntimeError) as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
