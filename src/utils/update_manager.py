"""
M√≥dulo para Gerenciamento de Atualiza√ß√µes da Aplica√ß√£o.

Respons√°vel por:
- Verificar a exist√™ncia de novas vers√µes em um reposit√≥rio local.
- Baixar o arquivo de atualiza√ß√£o para uma pasta tempor√°ria.
- Sinalizar ao launcher que uma atualiza√ß√£o est√° pronta para ser instalada.
"""

import os
import json
import shutil
import logging
from typing import Optional, Dict, Any
from sqlalchemy.exc import SQLAlchemyError
from PySide6.QtWidgets import QMessageBox, QApplication
from PySide6.QtCore import Qt
from semantic_version import Version
from src.utils.utilitarios import (
    VERSION_FILE_PATH, UPDATE_FLAG_FILE,
    UPDATES_DIR, UPDATE_TEMP_DIR, show_info, show_error)
from src.utils.usuarios import tem_permissao
from src.config import globals as g
from src.utils.banco_dados import session as db_session
from src.models.models import SystemControl


def checar_updates(current_version_str: str) -> Optional[Dict[str, Any]]:
    """
    Verifica se h√° uma nova vers√£o comparando com o arquivo versao.json.

    Args:
        current_version_str: A vers√£o atual da aplica√ß√£o (ex: "2.2.0").

    Returns:
        Um dicion√°rio com informa√ß√µes da nova vers√£o se houver uma, caso contr√°rio None.
    """
    if not os.path.exists(VERSION_FILE_PATH):
        logging.warning(
            "Arquivo 'versao.json' n√£o encontrado. Pulando verifica√ß√£o de atualiza√ß√£o.")
        return None

    try:
        with open(VERSION_FILE_PATH, 'r', encoding='utf-8') as f:
            server_info = json.load(f)

        latest_version_str = server_info.get("ultima_versao")
        if not latest_version_str:
            logging.error(
                "Chave 'ultima_versao' n√£o encontrada no versao.json.")
            return None

        if Version(latest_version_str) > Version(current_version_str):
            logging.info("Nova vers√£o encontrada: %s", latest_version_str)
            return server_info

        return None
    except (json.JSONDecodeError, KeyError, ValueError) as e:
        logging.error("Erro ao ler ou processar o arquivo de vers√£o: %s", e)
        return None
    except (IOError, OSError) as e:
        logging.error(
            "Erro inesperado de I/O ao verificar atualiza√ß√µes: %s", e)
        return None


def download_update(nome_arquivo: str) -> None:
    """
    "Baixa" (copia) o arquivo de atualiza√ß√£o do reposit√≥rio 'updates'
    para a pasta tempor√°ria 'update_temp'.

    Args:
        nome_arquivo: O nome do arquivo .zip da atualiza√ß√£o.

    Raises:
        FileNotFoundError: Se o arquivo de origem n√£o for encontrado.
        IOError: Se houver um erro ao copiar o arquivo.
    """
    source_path = os.path.join(UPDATES_DIR, nome_arquivo)
    if not os.path.exists(source_path):
        raise FileNotFoundError(
            f"Arquivo de atualiza√ß√£o '{nome_arquivo}' n√£o encontrado no diret√≥rio 'updates'.")

    os.makedirs(UPDATE_TEMP_DIR, exist_ok=True)
    destination_path = os.path.join(UPDATE_TEMP_DIR, nome_arquivo)

    try:
        shutil.copy(source_path, destination_path)
        logging.info("Arquivo de atualiza√ß√£o '%s' copiado para '%s'.",
                     nome_arquivo, UPDATE_TEMP_DIR)
    except IOError as e:
        logging.error("Erro ao copiar o arquivo de atualiza√ß√£o: %s", e)
        raise


def prepare_update_flag() -> None:
    """
    Cria um arquivo de sinaliza√ß√£o ('update_pending.flag') para notificar
    o launcher que uma atualiza√ß√£o deve ser instalada.
    """
    try:
        with open(UPDATE_FLAG_FILE, 'w', encoding='utf-8') as _:
            pass  # Cria um arquivo vazio
        logging.info("Sinalizador de atualiza√ß√£o '%s' criado.",
                     UPDATE_FLAG_FILE)
    except IOError as e:
        logging.error(
            "N√£o foi poss√≠vel criar o sinalizador de atualiza√ß√£o: %s", e)
        raise


def get_update_info() -> Optional[Dict[str, Any]]:
    """
    L√™ e retorna as informa√ß√µes do arquivo versao.json sem comparar vers√µes.
    """
    if not os.path.exists(VERSION_FILE_PATH):
        return None
    try:
        with open(VERSION_FILE_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, KeyError, IOError) as e:
        logging.error(
            "Erro ao ler informa√ß√µes de atualiza√ß√£o do versao.json: %s", e)
        return None

# --- Fun√ß√µes de Atualiza√ß√£o ---


def checagem_periodica_update(versao_atual: str):
    """Verifica periodicamente se h√° atualiza√ß√µes dispon√≠veis."""
    logging.info("Verificando atualiza√ß√µes em segundo plano...")
    update_info = checar_updates(versao_atual)
    if update_info:
        logging.info("Nova vers√£o encontrada: %s",
                     update_info.get('ultima_versao'))
        g.UPDATE_INFO = update_info
        _atualizar_ui_conforme_status(True)
    else:
        logging.info("Nenhuma nova atualiza√ß√£o encontrada.")
        g.UPDATE_INFO = None
        _atualizar_ui_conforme_status(False)


def manipular_clique_update():
    """Gerencia o clique no bot√£o de atualiza√ß√£o."""
    if g.UPDATE_INFO:
        if not tem_permissao('usuario', 'admin', show_message=False):
            msg = (f"Uma nova vers√£o ({g.UPDATE_INFO.get('ultima_versao', 'N/A')}) "
                   "est√° dispon√≠vel.\n\nPor favor, pe√ßa a um administrador para "
                   "fazer o login e aplicar a atualiza√ß√£o.")
            show_info("Permiss√£o Necess√°ria", msg, parent=g.PRINC_FORM)
            return

        msg_admin = (f"Uma nova vers√£o ({g.UPDATE_INFO.get('ultima_versao', 'N/A')}) "
                     "est√° dispon√≠vel.\n\nDeseja preparar a atualiza√ß√£o? O sistema "
                     "notificar√° todos os usu√°rios para salvar seu trabalho e "
                     "fechar o aplicativo.")
        reply = QMessageBox.question(g.PRINC_FORM, "Confirmar Atualiza√ß√£o", msg_admin,
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            _iniciar_processo_update()
    else:
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            logging.info("Verifica√ß√£o manual de atualiza√ß√£o iniciada.")
            QApplication.processEvents()
            checagem_periodica_update(None)
        finally:
            QApplication.restoreOverrideCursor()

        if g.UPDATE_INFO:
            msg_found = (f"A vers√£o {g.UPDATE_INFO.get('ultima_versao', 'N/A')} "
                         "est√° dispon√≠vel!")
            show_info("Atualiza√ß√£o Encontrada", msg_found, parent=g.PRINC_FORM)
        else:
            show_info("Verificar Atualiza√ß√µes",
                      "Voc√™ j√° est√° usando a vers√£o mais recente.", parent=g.PRINC_FORM)


def _iniciar_processo_update():
    """Baixa, prepara o flag e dispara o comando de shutdown."""
    QApplication.setOverrideCursor(Qt.WaitCursor)
    try:
        logging.info("Iniciando processo de atualiza√ß√£o: baixando arquivos...")
        QApplication.processEvents()
        download_update(g.UPDATE_INFO['nome_arquivo'])
        prepare_update_flag()
        cmd_entry = db_session.query(
            SystemControl).filter_by(key='UPDATE_CMD').first()
        if cmd_entry:
            cmd_entry.value = 'SHUTDOWN'
            db_session.commit()
        logging.info("Comando SHUTDOWN enviado para o banco de dados.")
        msg_success = ("A atualiza√ß√£o foi preparada. Ela ser√° instalada na pr√≥xima "
                       "vez que o programa for iniciado.\nO aplicativo ser√° "
                       "encerrado em breve.")
        QMessageBox.information(g.PRINC_FORM, "Sucesso", msg_success)
    except (FileNotFoundError, IOError, SQLAlchemyError, KeyError) as e:
        logging.error("Erro ao iniciar o processo de atualiza√ß√£o: %s", e)
        show_error("Erro de Atualiza√ß√£o",
                   f"N√£o foi poss√≠vel preparar a atualiza√ß√£o: {e}", parent=g.PRINC_FORM)
    finally:
        QApplication.restoreOverrideCursor()


def _atualizar_ui_conforme_status(update_available: bool):
    """Atualiza o texto e o estado do bot√£o de atualiza√ß√£o."""
    if not hasattr(g, 'UPDATE_ACTION') or not g.UPDATE_ACTION:
        return
    if update_available:
        g.UPDATE_ACTION.setText("‚¨áÔ∏è Aplicar Atualiza√ß√£o")
        tooltip_msg = f"Vers√£o {g.UPDATE_INFO.get('ultima_versao', '')} dispon√≠vel!"
        g.UPDATE_ACTION.setToolTip(tooltip_msg)
    else:
        g.UPDATE_ACTION.setText("üîÑ Verificar Atualiza√ß√µes")
        g.UPDATE_ACTION.setToolTip(
            "Verificar se h√° uma nova vers√£o do aplicativo.")
