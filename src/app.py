"""
Formul√°rio Principal do Aplicativo de C√°lculo de Dobra.

Este m√≥dulo implementa a interface principal do aplicativo, permitindo a gest√£o
de dedu√ß√µes, materiais, espessuras e canais. Utiliza PySide6 para a interface
gr√°fica, al√©m de m√≥dulos auxiliares para banco de dados, vari√°veis globais e
funcionalidades espec√≠ficas, incluindo um sistema de atualiza√ß√£o controlado.

Vers√£o Refatorada: Reduz a redund√¢ncia na cria√ß√£o de menus e na abertura de
formul√°rios, centralizando a l√≥gica e melhorando a manutenibilidade.
"""

import json
import logging
import os
import signal
import sys
import traceback
import uuid
from functools import partial
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QIcon, QAction
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QGridLayout, QVBoxLayout)
from sqlalchemy.exc import SQLAlchemyError

from src.utils.utilitarios import (
    aplicar_medida_borda_espaco,
    setup_logging,
    CONFIG_FILE,
    ICON_PATH
)
from src.utils.usuarios import logout
from src.utils.janelas import (
    aplicar_no_topo_app_principal, remover_janelas_orfas)
from src.utils.interface_manager import carregar_interface
from src.utils.estilo import (
    aplicar_tema_qdarktheme,
    aplicar_tema_inicial,
    obter_temas_disponiveis,
    registrar_tema_actions,
    obter_tema_atual
)
from src.utils.update_manager import (
    periodic_update_check, handle_update_click
)
from src.forms.form_wrappers import (
    FormEspessura,
    FormDeducao,
    FormMaterial,
    FormCanal
)
from src.forms import (
    form_sobre,
    form_aut,
    form_usuario,
    form_razao_rie,
    form_impressao
)
from src.components.menu_custom import MenuCustom
from src.components.barra_titulo import BarraTitulo
from src.utils.banco_dados import session as db_session
from src.models.models import Usuario
from src.config import globals as g
from src.utils.banco_dados import inicializar_banco_dados
from src.utils.session_manager import (
    registrar_sessao, remover_sessao, atualizar_heartbeat_sessao, obter_comando_sistema)

# --- Vari√°veis Globais de Configura√ß√£o e Vers√£o ---
g.APP_VERSION = "2.2.0"
g.SESSION_ID = str(uuid.uuid4())


# --- Fun√ß√µes de Gerenciamento da Aplica√ß√£o ---
def verificar_admin_existente():
    """Verifica se existe um administrador cadastrado."""
    logging.info("Verificando se existe um administrador.")
    admin_existente = db_session.query(Usuario).filter(
        Usuario.role == "admin").first()
    if not admin_existente:
        logging.warning(
            "Nenhum administrador encontrado. Abrindo formul√°rio de autoriza√ß√£o.")
        form_aut.main(g.PRINC_FORM)
    else:
        logging.info("Administrador encontrado.")


def carregar_configuracao():
    """Carrega a configura√ß√£o do aplicativo."""
    logging.info("Carregando configura√ß√µes de %s", CONFIG_FILE)
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    logging.warning(
        "Arquivo de configura√ß√£o n√£o encontrado. Usando configura√ß√£o padr√£o.")
    return {}


def salvar_configuracao(config):
    """Salva a configura√ß√£o do aplicativo."""
    logging.info("Salvando configura√ß√µes em %s", CONFIG_FILE)
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4)


def fechar_aplicativo():
    """Fecha o aplicativo de forma segura. A remo√ß√£o da sess√£o √© tratada por 'aboutToQuit'."""
    logging.info("Iniciando o processo de fechamento do aplicativo.")

    try:
        if g.PRINC_FORM:
            # Salva a geometria antes de fechar
            pos = g.PRINC_FORM.pos()
            config = carregar_configuracao()
            config['geometry'] = f"+{pos.x()}+{pos.y()}"
            salvar_configuracao(config)
            g.PRINC_FORM.close()

        app = QApplication.instance()
        if app:
            app.quit()
    except (RuntimeError, AttributeError) as e:
        logging.error("Erro durante o fechamento do aplicativo: %s", e)
        sys.exit(0)


def configurar_janela_principal(config):
    """Configura a janela principal do aplicativo."""
    logging.info("Configurando a janela principal.")
    remover_janelas_orfas()
    if g.PRINC_FORM:
        try:
            g.PRINC_FORM.close()
            g.PRINC_FORM.deleteLater()
            g.PRINC_FORM = None
        except (RuntimeError, AttributeError):
            pass

    g.PRINC_FORM = QMainWindow()
    g.PRINC_FORM.setWindowTitle(f"C√°lculo de Dobra - v{g.APP_VERSION}")
    g.PRINC_FORM.setFixedSize(360, 500)
    g.PRINC_FORM.is_main_window = True
    g.PRINC_FORM.setWindowFlags(Qt.FramelessWindowHint | Qt.Window)

    if 'geometry' in config and isinstance(config['geometry'], str):
        parts = config['geometry'].split('+')
        if len(parts) >= 3:
            try:
                x, y = int(parts[1]), int(parts[2])
                g.PRINC_FORM.move(x, y)
                logging.info(
                    "Janela movida para a posi√ß√£o salva: %d, %d", x, y)
            except (ValueError, IndexError):
                logging.warning("Geometria salva inv√°lida: %s",
                                config['geometry'])

    icone_path = ICON_PATH
    if icone_path and os.path.exists(icone_path):
        g.PRINC_FORM.setWindowIcon(QIcon(icone_path))
    else:
        logging.error("Arquivo de √≠cone n√£o encontrado em: %s", icone_path)

    g.PRINC_FORM.setAttribute(Qt.WA_QuitOnClose, True)
    logging.info("Configura√ß√£o da janela principal conclu√≠da.")


# --- REATORA√á√ÉO: L√≥gica de Abertura de Formul√°rios ---
def abrir_formulario(form_class, edit_flag_name, is_edit_mode):
    """
    Abre um formul√°rio gen√©rico, configurando a flag de edi√ß√£o correspondente.
    """
    setattr(g, edit_flag_name, is_edit_mode)
    form_class.main(g.PRINC_FORM)


def _executar_autenticacao(is_login):
    """Abre o formul√°rio de autentica√ß√£o para login ou novo usu√°rio."""
    setattr(g, "LOGIN", is_login)
    form_aut.main(g.PRINC_FORM)


def _toggle_no_topo():
    """Alterna o estado 'sempre no topo' da janela principal."""
    aplicar_no_topo_app_principal()


# --- REATORA√á√ÉO: Configura√ß√£o de Menus e Interface ---
def configurar_menu():
    """Configura o menu superior da janela principal de forma centralizada."""
    if not hasattr(g, 'MENU_CUSTOM') or g.MENU_CUSTOM is None:
        return
    menu_bar = g.MENU_CUSTOM.get_menu_bar()

    # Estrutura de dados que define todos os menus e suas a√ß√µes
    estrutura_menu = {
        "üìÅ Arquivo": [
            ("‚ûï Nova Dedu√ß√£o", partial(abrir_formulario, FormDeducao, 'EDIT_DED', False)),
            ("‚ûï Novo Material", partial(
                abrir_formulario, FormMaterial, 'EDIT_MAT', False)),
            ("‚ûï Nova Espessura", partial(
                abrir_formulario, FormEspessura, 'EDIT_ESP', False)),
            ("‚ûï Novo Canal", partial(abrir_formulario, FormCanal, 'EDIT_CANAL', False)),
            ("separator", None),
            ("üö™ Sair", fechar_aplicativo)
        ],
        "‚úèÔ∏è Editar": [
            ("üìù Editar Dedu√ß√£o", partial(
                abrir_formulario, FormDeducao, 'EDIT_DED', True)),
            ("üìù Editar Material", partial(
                abrir_formulario, FormMaterial, 'EDIT_MAT', True)),
            ("üìù Editar Espessura", partial(
                abrir_formulario, FormEspessura, 'EDIT_ESP', True)),
            ("üìù Editar Canal", partial(abrir_formulario, FormCanal, 'EDIT_CANAL', True))
        ],
        "üîß Utilidades": [
            ("‚ûó Raz√£o Raio/Espessura", lambda: form_razao_rie.main(g.PRINC_FORM)),
            ("üñ®Ô∏è Impress√£o em Lote", lambda: form_impressao.main(g.PRINC_FORM))
        ],
        "üë§ Usu√°rio": [
            ("üîê Login", partial(_executar_autenticacao, True)),
            ("üë• Novo Usu√°rio", partial(_executar_autenticacao, False)),
            ("‚öôÔ∏è Gerenciar Usu√°rios", lambda: form_usuario.main(g.PRINC_FORM)),
            ("separator", None),
            ("üö™ Sair", logout)
        ]
    }

    for nome_menu, acoes in estrutura_menu.items():
        menu = menu_bar.addMenu(nome_menu)
        _adicionar_acoes_ao_menu(menu, acoes)

    # Menus com l√≥gica especial s√£o criados separadamente
    _criar_menu_opcoes(menu_bar)
    _criar_menu_ajuda(menu_bar)


def _adicionar_acoes_ao_menu(menu, acoes):
    """Adiciona uma lista de a√ß√µes a um menu."""
    for nome, funcao in acoes:
        if nome == "separator":
            menu.addSeparator()
        else:
            action = QAction(nome, g.PRINC_FORM)
            action.triggered.connect(funcao)
            menu.addAction(action)


def _criar_menu_opcoes(menu_bar):
    """Cria o menu Op√ß√µes (mantido separado por sua l√≥gica complexa)."""
    opcoes_menu = menu_bar.addMenu("‚öôÔ∏è Op√ß√µes")
    if not hasattr(g, 'NO_TOPO_VAR') or g.NO_TOPO_VAR is None:
        g.NO_TOPO_VAR = False
    no_topo_action = QAction("üìå No topo", g.PRINC_FORM)
    no_topo_action.setCheckable(True)
    no_topo_action.setChecked(g.NO_TOPO_VAR)
    no_topo_action.triggered.connect(_toggle_no_topo)
    opcoes_menu.addAction(no_topo_action)

    temas_menu = opcoes_menu.addMenu("üé® Temas")
    temas_actions = {}
    for tema in obter_temas_disponiveis():
        action = QAction(tema.capitalize(), g.PRINC_FORM)
        action.setCheckable(True)
        action.setChecked(tema == getattr(g, 'TEMA_ATUAL', 'dark'))
        action.triggered.connect(
            lambda checked, t=tema: aplicar_tema_qdarktheme(t))
        temas_menu.addAction(action)
        temas_actions[tema] = action
    registrar_tema_actions(temas_actions)


def _criar_menu_ajuda(menu_bar):
    """Cria o menu Ajuda (mantido separado por sua l√≥gica de atualiza√ß√£o)."""
    help_menu = menu_bar.addMenu("‚ùì Ajuda")
    sobre_action = QAction(f"‚ÑπÔ∏è Sobre (v{g.APP_VERSION})", g.PRINC_FORM)
    sobre_action.triggered.connect(lambda: form_sobre.main(g.PRINC_FORM))
    help_menu.addAction(sobre_action)
    help_menu.addSeparator()
    g.UPDATE_ACTION = QAction("üîÑ Verificar Atualiza√ß√µes", g.PRINC_FORM)
    g.UPDATE_ACTION.triggered.connect(handle_update_click)
    help_menu.addAction(g.UPDATE_ACTION)


def configurar_frames():
    """Configura os frames principais da janela."""
    logging.info("Configurando os frames da UI.")
    central_widget = QWidget()
    g.PRINC_FORM.setCentralWidget(central_widget)
    vlayout = QVBoxLayout(central_widget)
    aplicar_medida_borda_espaco(vlayout, 0, 0)

    tema_atual = getattr(g, 'TEMA_ATUAL', 'dark')
    g.BARRA_TITULO = BarraTitulo(g.PRINC_FORM, tema=tema_atual)
    vlayout.addWidget(g.BARRA_TITULO)

    if hasattr(g, 'BARRA_TITULO') and g.BARRA_TITULO:
        g.BARRA_TITULO.set_tema(obter_tema_atual())

    g.MENU_CUSTOM = MenuCustom(g.PRINC_FORM)
    vlayout.addWidget(g.MENU_CUSTOM)

    conteudo_widget = QWidget()
    layout = QGridLayout(conteudo_widget)
    vlayout.addWidget(conteudo_widget)

    g.VALORES_W = [1]
    g.EXP_V = False
    g.EXP_H = False
    g.MAIN_LAYOUT = layout
    g.CARREGAR_INTERFACE_FUNC = carregar_interface
    carregar_interface(1, layout)
    logging.info("Configura√ß√£o dos frames conclu√≠da.")


# --- Fun√ß√µes de Inicializa√ß√£o (Refatorado de main) ---


def configurar_sinais_excecoes():
    """Configura handlers para exce√ß√µes n√£o tratadas e sinais do sistema."""
    def handle_exception(exc_type, exc_value, exc_traceback):
        if exc_type != KeyboardInterrupt:
            error_msg = "".join(traceback.format_exception(
                exc_type, exc_value, exc_traceback))
            logging.critical("ERRO N√ÉO TRATADO:\n%s", error_msg)

    def signal_handler(signum, _):
        logging.warning("Sinal %s recebido. Fechando o aplicativo.", signum)
        fechar_aplicativo()

    sys.excepthook = handle_exception
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


def processar_verificacao_sistema():
    """Fun√ß√£o chamada pelo timer para verificar o estado do sistema."""
    # 1. Avisa que a inst√¢ncia est√° viva
    atualizar_heartbeat_sessao()

    # 2. Verifica se h√° um comando para executar
    comando = obter_comando_sistema()

    # 3. Age com base no comando
    if comando == 'SHUTDOWN':
        fechar_aplicativo()


def iniciar_timers():
    """Inicializa e armazena os QTimers no objeto global 'g' para mant√™-los ativos."""
    g.TIMER_SISTEMA = QTimer()
    g.TIMER_SISTEMA.timeout.connect(processar_verificacao_sistema)
    g.TIMER_SISTEMA.start(5000)

    g.UPDATE_CHECK_TIMER = QTimer()
    g.UPDATE_CHECK_TIMER.timeout.connect(periodic_update_check)
    g.UPDATE_CHECK_TIMER.start(300000)
    QTimer.singleShot(1000, periodic_update_check)


# --- Fun√ß√£o Principal ---
def main():
    """Fun√ß√£o principal que inicializa e executa a aplica√ß√£o."""
    setup_logging('app.log', log_to_console=True)
    app = None
    try:
        logging.info("Iniciando a aplica√ß√£o v%s...", g.APP_VERSION)
        inicializar_banco_dados()
        configurar_sinais_excecoes()

        app = QApplication(sys.argv)
        aplicar_tema_inicial("dark")

        app.aboutToQuit.connect(remover_sessao)

        config = carregar_configuracao()
        configurar_janela_principal(config)
        configurar_frames()
        configurar_menu()

        registrar_sessao()
        verificar_admin_existente()

        if g.PRINC_FORM:
            g.PRINC_FORM.show()
            iniciar_timers()
            logging.info("Aplicativo iniciado. Entrando no loop de eventos.")
            return app.exec()

        logging.critical("ERRO FATAL: A janela principal n√£o foi criada!")
        return 1

    except (RuntimeError, SQLAlchemyError, ImportError, FileNotFoundError, OSError) as e:
        logging.critical("ERRO CR√çTICO na inicializa√ß√£o: %s", e, exc_info=True)
        if app:
            app.quit()
        return 1
    finally:
        logging.info("Aplica√ß√£o finalizada.")
        if db_session:
            db_session.close()


if __name__ == "__main__":
    sys.exit(main())
